{
	"info": {
		"_postman_id": "0357411c-dacf-4152-b46a-1ed297b25898",
		"name": "Alkemy Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login-success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code is not 500\", function () {",
									"    pm.response.to.not.have.status(500);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response time is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status code name has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('token');",
									"    pm.expect(jsonData.data.token).to.be.an('string');",
									"    pm.expect(jsonData.data).to.have.property('user');",
									"    pm.expect(jsonData.data).to.have.property('role');",
									"    pm.collectionVariables.set('token', jsonData.data.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"0.09818545211055896@gmail.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/login",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login-Invalid credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Status code is not 200\", function () {",
									"    pm.response.to.not.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response time is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status code name has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"    pm.expect(jsonData.error.message).to.be.an('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"notexist@gmail.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/login",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login-Invalid request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Status code is not 200\", function () {",
									"    pm.response.to.not.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response time is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status code name has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"    pm.expect(jsonData.error.message).to.be.an('string');",
									"    pm.expect(jsonData.error).to.have.property('detail');",
									"    pm.expect(jsonData.error.detail).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"notIsAEmail\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/login",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Register",
			"item": [
				{
					"name": "Register User - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Status code is not 500\", function () {",
									"    pm.response.to.not.have.status(500);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response time is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status code name has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('string');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('randomNumber', Math.random());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{randomNumber}}@gmail.com\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/register",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User - Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Status code is not 500\", function () {",
									"    pm.response.to.not.have.status(500);",
									"});",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"pm.test(\"Response time is json\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Status code name has correct properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.have.property('message');",
									"    pm.expect(jsonData.error.message).to.be.an('string');",
									"    pm.expect(jsonData.error).to.have.property('detail');",
									"    pm.expect(jsonData.error.detail).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "{{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"ikari696\",\n    \"password\": \"123456\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{basepath}}/auth/register",
							"host": [
								"{{basepath}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Characters",
			"item": [
				{
					"name": "Save Character",
					"item": [
						{
							"name": "Save Character - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('name');",
											"    pm.expect(jsonData.data.name).to.be.an('string');",
											"    pm.expect(jsonData.data).to.have.property('id');",
											"    pm.expect(jsonData.data.id).to.be.an('number');",
											"    pm.collectionVariables.set('characterId', jsonData.data.id)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('randomNumber', Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Capitan America {{randomNumber}}\",\n    \"age\": 58,\n    \"weigth\": 60,\n    \"history\": \"Super suit\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Character - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"    pm.expect(jsonData.error).to.have.property('detail');",
											"    pm.expect(jsonData.error.detail).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('randomNumber', Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Fernando\",\n    \"email\": \"ikari696@gmail.com\",\n    \"password\": \"123456\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Character",
					"item": [
						{
							"name": "Update Character - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"age\": 57\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Character - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"    pm.expect(jsonData.error).to.have.property('detail');",
											"    pm.expect(jsonData.error.detail).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Luisito\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "23434234324123"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Get Characters List",
					"item": [
						{
							"name": "Get All Characters List - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters?filter[name]=man",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "man"
										},
										{
											"key": "filter[age]",
											"value": "56",
											"disabled": true
										},
										{
											"key": "filter[weigth]",
											"value": "60",
											"disabled": true
										},
										{
											"key": "filter[idMovie]",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Characters By Id - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Without Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status code is not 200\", function () {",
											"    pm.response.to.not.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Gaston",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "ikari696@gmail.com",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Martinez",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Character Detail",
					"item": [
						{
							"name": "Get All Characters - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters?filter[name]=Iron Man&options[limit]=10&options[offset]=0",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Iron Man"
										},
										{
											"key": "filter[age]",
											"value": "56",
											"disabled": true
										},
										{
											"key": "filter[weigth]",
											"value": "56",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10"
										},
										{
											"key": "options[offset]",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Characters By Id - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Without Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status code is not 200\", function () {",
											"    pm.response.to.not.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Gaston",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "ikari696@gmail.com",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Martinez",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Characters",
					"item": [
						{
							"name": "Delete Character - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{characterId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"    pm.expect(jsonData.error).to.have.property('detail');",
											"    pm.expect(jsonData.error.detail).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/characters/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"characters",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Movies",
			"item": [
				{
					"name": "Save Movie",
					"item": [
						{
							"name": "Save Movie - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('title');",
											"    pm.expect(jsonData.data.title).to.be.an('string');",
											"    pm.expect(jsonData.data).to.have.property('id');",
											"    pm.expect(jsonData.data.id).to.be.an('number');",
											"    pm.collectionVariables.set('movieId', jsonData.data.id)",
											"    pm.collectionVariables.set('genreTypeId', jsonData.data.genderTypeId)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('randomNumber', Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"title\": \"Avengers {{randomNumber}}\",\n    \"calification\": \"5\",\n    \"creationDate\": \"05/20/2021\",\n    \"genderType\": \"SCIENCE_FICTION\",\n    \"contentType\": \"MOVIE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save Movie - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"    pm.expect(jsonData.error).to.have.property('detail');",
											"    pm.expect(jsonData.error.detail).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('randomNumber', Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"genderType\": \"DRAMA32424324324\",\n    \"contentType\": \"SERIE34mnrtmet\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update Movie",
					"item": [
						{
							"name": "Update Movie - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"calification\": 3,\n    \"contentType\": \"SERIE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{movieId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Movie - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"    pm.expect(jsonData.error).to.have.property('detail');",
											"    pm.expect(jsonData.error.detail).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Luisito\",\n    \"contentType\": \"djfdjfdhf\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "23434234324123"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Get Movies",
					"item": [
						{
							"name": "Get All Movies - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									],
									"query": [
										{
											"key": "filter[title]",
											"value": "aven",
											"disabled": true
										},
										{
											"key": "filter[genderTypeId]",
											"value": "{{genreTypeId}}",
											"disabled": true
										},
										{
											"key": "filter[creationDate]",
											"value": "ASC",
											"disabled": true
										},
										{
											"key": "options[order]",
											"value": "creationDate;ASC",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Movies By Id - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{movieId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Without Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status code is not 200\", function () {",
											"    pm.response.to.not.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Gaston",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "ikari696@gmail.com",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Martinez",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get Movie Detail",
					"item": [
						{
							"name": "Get All Movies - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies?filter[title]=aven&options[order]=creationDate;ASC",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									],
									"query": [
										{
											"key": "filter[title]",
											"value": "aven"
										},
										{
											"key": "filter[genderTypeId]",
											"value": "{{genreTypeId}}",
											"disabled": true
										},
										{
											"key": "filter[creationDate]",
											"value": "ASC",
											"disabled": true
										},
										{
											"key": "options[order]",
											"value": "creationDate;ASC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Movies By Id - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('object');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{movieId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Without Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status code is not 200\", function () {",
											"    pm.response.to.not.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Gaston",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "ikari696@gmail.com",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Martinez",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete Movies",
					"item": [
						{
							"name": "Delete Movie - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{movieId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"    pm.expect(jsonData.error).to.have.property('detail');",
											"    pm.expect(jsonData.error.detail).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/movies/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"movies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Get Users",
					"item": [
						{
							"name": "Get All - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Gaston",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "ikari696@gmail.com",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Martinez",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All - Without Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Status code is not 200\", function () {",
											"    pm.response.to.not.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter[name]",
											"value": "Gaston",
											"disabled": true
										},
										{
											"key": "filter[email]",
											"value": "ikari696@gmail.com",
											"disabled": true
										},
										{
											"key": "filter[lastName]",
											"value": "Martinez",
											"disabled": true
										},
										{
											"key": "options[limit]",
											"value": "10",
											"disabled": true
										},
										{
											"key": "options[offset]",
											"value": "0",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Save User",
					"item": [
						{
							"name": "Save User - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"    pm.expect(jsonData.data).to.have.property('email');",
											"    pm.expect(jsonData.data.email).to.be.an('string');",
											"    pm.expect(jsonData.data).to.have.property('id');",
											"    pm.expect(jsonData.data.id).to.be.an('number');",
											"    pm.collectionVariables.set('userId', jsonData.data.id)",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('randomNumber', Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Gaston M {{randomNumber}}\",\n    \"email\": \"{{randomNumber}}@gmail.com\",\n    \"password\": \"123456\",\n    \"role\": \"USER_ROLE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Save User - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"    pm.expect(jsonData.error).to.have.property('detail');",
											"    pm.expect(jsonData.error.detail).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set('randomNumber', Math.random());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Fernando\",\n    \"email\": \"hfhgj\"\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "Delete User - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete User - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"    pm.expect(jsonData.error).to.have.property('detail');",
											"    pm.expect(jsonData.error.detail).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "0000"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "Update User - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('data');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Gastoncito\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update User - Failure",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Status code is not 500\", function () {",
											"    pm.response.to.not.have.status(500);",
											"});",
											"",
											"pm.test(\"Response time is less than 500ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500);",
											"});",
											"",
											"pm.test(\"Response time is json\", function () {",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test(\"Status code name has correct properties\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property('error');",
											"    pm.expect(jsonData.error).to.have.property('message');",
											"    pm.expect(jsonData.error.message).to.be.an('string');",
											"    pm.expect(jsonData.error).to.have.property('detail');",
											"    pm.expect(jsonData.error.detail).to.be.an('array');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"type": "text",
										"value": "{{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Luisito\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{basepath}}/users/:id",
									"host": [
										"{{basepath}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "23434234324123"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "randomNumber",
			"value": ""
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "characterId",
			"value": ""
		},
		{
			"key": "movieId",
			"value": ""
		},
		{
			"key": "genreTypeId",
			"value": ""
		}
	]
}